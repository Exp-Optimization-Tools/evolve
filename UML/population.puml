@startuml

' an abstract class representing a Chromosome
abstract class Chromosome {

}
Chromosome <|- BinaryChromosome
Chromosome <|- RealCodedChromosome

' the different initialization states for a binary chromosome
enum InitializationState {
  zeros
  ones
  random
}

' a class representing a binary chromosome
class BinaryChromosome {
  ' the size of the chromosome
  + size: Integer
  ' the evaluation function for the chromosome
  - evaluate: Callable
  ' Returns the fitness of the chromosome by calling evaluate
  + fitness(): Float
}

' a class representing a real coded chromosome
class RealCodedChromosome {

}

' a class for generating populations of chromosomes
class ChromosomeFactory {
  ' the kind of chromosome objects to generate
  - chromosome_class: Chromosome.Type
  ' the size of the chromosome to generate
  - chromosome_size: Integer
  ' the initialization state for the chromosome
  - initial_state: InitializationState
  ' the evaluation function for the chromosomes
  - evaluate: Callable
  ' build and return the next generated object
  + next_individual(): Chromosome
  ' build and return a population of individuals
  + population(): List[Chromosome]
}

' a class representing a population of chromosomes
class Population {

}
Population "1" *-- "1" Factory: < factory
Population "1" *-- "*" Chromosome: < individuals

@enduml
